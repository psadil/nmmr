// Generated by rstantools.  Do not edit by hand.

/*
    nmmr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    nmmr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with nmmr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_vtf_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_vtf");
    reader.add_event(1, 1, "include", "data/data.stan");
    reader.add_event(1, 0, "start", "data/data.stan");
    reader.add_event(17, 16, "end", "data/data.stan");
    reader.add_event(17, 2, "restart", "model_vtf");
    reader.add_event(50, 35, "include", "tparameters/donut.stan");
    reader.add_event(50, 0, "start", "tparameters/donut.stan");
    reader.add_event(56, 6, "end", "tparameters/donut.stan");
    reader.add_event(56, 36, "restart", "model_vtf");
    reader.add_event(88, 68, "include", "model/likelihood.stan");
    reader.add_event(88, 0, "start", "model/likelihood.stan");
    reader.add_event(116, 28, "end", "model/likelihood.stan");
    reader.add_event(116, 69, "restart", "model_vtf");
    reader.add_event(119, 70, "end", "model_vtf");
    return reader;
}
#include <stan_meta_header.hpp>
class model_vtf
  : public stan::model::model_base_crtp<model_vtf> {
private:
        int n;
        int n_voxel;
        int n_sub;
        std::vector<int> sub_by_vox;
        int n_unique_orientations;
        vector_d unique_orientations;
        std::vector<int> n_unique_orientations_vox;
        std::vector<std::vector<int> > ori_by_vox;
        vector_d y;
        std::vector<int> X;
        std::vector<int> sub;
        double ntfp_min;
        int modulation;
        vector_d priors;
        std::vector<int> voxel;
        int maxX;
public:
    model_vtf(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_vtf(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_vtf_namespace::model_vtf";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_voxel", "int", context__.to_vec());
            n_voxel = int(0);
            vals_i__ = context__.vals_i("n_voxel");
            pos__ = 0;
            n_voxel = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_sub", "int", context__.to_vec());
            n_sub = int(0);
            vals_i__ = context__.vals_i("n_sub");
            pos__ = 0;
            n_sub = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("sub_by_vox", "n_voxel", n_voxel);
            context__.validate_dims("data initialization", "sub_by_vox", "int", context__.to_vec(n_voxel));
            sub_by_vox = std::vector<int>(n_voxel, int(0));
            vals_i__ = context__.vals_i("sub_by_vox");
            pos__ = 0;
            size_t sub_by_vox_k_0_max__ = n_voxel;
            for (size_t k_0__ = 0; k_0__ < sub_by_vox_k_0_max__; ++k_0__) {
                sub_by_vox[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_unique_orientations", "int", context__.to_vec());
            n_unique_orientations = int(0);
            vals_i__ = context__.vals_i("n_unique_orientations");
            pos__ = 0;
            n_unique_orientations = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("unique_orientations", "n_unique_orientations", n_unique_orientations);
            context__.validate_dims("data initialization", "unique_orientations", "vector_d", context__.to_vec(n_unique_orientations));
            unique_orientations = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_unique_orientations);
            vals_r__ = context__.vals_r("unique_orientations");
            pos__ = 0;
            size_t unique_orientations_j_1_max__ = n_unique_orientations;
            for (size_t j_1__ = 0; j_1__ < unique_orientations_j_1_max__; ++j_1__) {
                unique_orientations(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "unique_orientations", unique_orientations, -(stan::math::pi()));
            check_less_or_equal(function__, "unique_orientations", unique_orientations, stan::math::pi());
            current_statement_begin__ = 8;
            validate_non_negative_index("n_unique_orientations_vox", "n_voxel", n_voxel);
            context__.validate_dims("data initialization", "n_unique_orientations_vox", "int", context__.to_vec(n_voxel));
            n_unique_orientations_vox = std::vector<int>(n_voxel, int(0));
            vals_i__ = context__.vals_i("n_unique_orientations_vox");
            pos__ = 0;
            size_t n_unique_orientations_vox_k_0_max__ = n_voxel;
            for (size_t k_0__ = 0; k_0__ < n_unique_orientations_vox_k_0_max__; ++k_0__) {
                n_unique_orientations_vox[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("ori_by_vox", "n_voxel", n_voxel);
            validate_non_negative_index("ori_by_vox", "n_unique_orientations", n_unique_orientations);
            context__.validate_dims("data initialization", "ori_by_vox", "int", context__.to_vec(n_voxel,n_unique_orientations));
            ori_by_vox = std::vector<std::vector<int> >(n_voxel, std::vector<int>(n_unique_orientations, int(0)));
            vals_i__ = context__.vals_i("ori_by_vox");
            pos__ = 0;
            size_t ori_by_vox_k_0_max__ = n_voxel;
            size_t ori_by_vox_k_1_max__ = n_unique_orientations;
            for (size_t k_1__ = 0; k_1__ < ori_by_vox_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ori_by_vox_k_0_max__; ++k_0__) {
                    ori_by_vox[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t ori_by_vox_i_0_max__ = n_voxel;
            size_t ori_by_vox_i_1_max__ = n_unique_orientations;
            for (size_t i_0__ = 0; i_0__ < ori_by_vox_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < ori_by_vox_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "ori_by_vox[i_0__][i_1__]", ori_by_vox[i_0__][i_1__], 0);
                    check_less_or_equal(function__, "ori_by_vox[i_0__][i_1__]", ori_by_vox[i_0__][i_1__], n_unique_orientations);
                }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("X", "n", n);
            context__.validate_dims("data initialization", "X", "int", context__.to_vec(n));
            X = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("X");
            pos__ = 0;
            size_t X_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                X[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("sub", "n", n);
            context__.validate_dims("data initialization", "sub", "int", context__.to_vec(n));
            sub = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("sub");
            pos__ = 0;
            size_t sub_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < sub_k_0_max__; ++k_0__) {
                sub[k_0__] = vals_i__[pos__++];
            }
            size_t sub_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < sub_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sub[i_0__]", sub[i_0__], 1);
                check_less_or_equal(function__, "sub[i_0__]", sub[i_0__], n_sub);
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "ntfp_min", "double", context__.to_vec());
            ntfp_min = double(0);
            vals_r__ = context__.vals_r("ntfp_min");
            pos__ = 0;
            ntfp_min = vals_r__[pos__++];
            check_greater_or_equal(function__, "ntfp_min", ntfp_min, 0);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "modulation", "int", context__.to_vec());
            modulation = int(0);
            vals_i__ = context__.vals_i("modulation");
            pos__ = 0;
            modulation = vals_i__[pos__++];
            check_greater_or_equal(function__, "modulation", modulation, 0);
            check_less_or_equal(function__, "modulation", modulation, 1);
            current_statement_begin__ = 15;
            validate_non_negative_index("priors", "23", 23);
            context__.validate_dims("data initialization", "priors", "vector_d", context__.to_vec(23));
            priors = Eigen::Matrix<double, Eigen::Dynamic, 1>(23);
            vals_r__ = context__.vals_r("priors");
            pos__ = 0;
            size_t priors_j_1_max__ = 23;
            for (size_t j_1__ = 0; j_1__ < priors_j_1_max__; ++j_1__) {
                priors(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("voxel", "n", n);
            context__.validate_dims("data initialization", "voxel", "int", context__.to_vec(n));
            voxel = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("voxel");
            pos__ = 0;
            size_t voxel_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < voxel_k_0_max__; ++k_0__) {
                voxel[k_0__] = vals_i__[pos__++];
            }
            size_t voxel_i_0_max__ = n;
            for (size_t i_0__ = 0; i_0__ < voxel_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "voxel[i_0__]", voxel[i_0__], 1);
                check_less_or_equal(function__, "voxel[i_0__]", voxel[i_0__], n_voxel);
            }
            // initialize transformed data variables
            current_statement_begin__ = 20;
            maxX = int(0);
            stan::math::fill(maxX, std::numeric_limits<int>::min());
            stan::math::assign(maxX,max(X));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            num_params_r__ += 1;
            current_statement_begin__ = 26;
            validate_non_negative_index("sigma", "n_voxel", n_voxel);
            num_params_r__ += n_voxel;
            current_statement_begin__ = 27;
            validate_non_negative_index("meanAngleVector", "n_voxel", n_voxel);
            validate_non_negative_index("meanAngleVector", "2", 2);
            num_params_r__ += (n_voxel * 2);
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            validate_non_negative_index("v_gamma", "n_voxel", n_voxel);
            num_params_r__ += n_voxel;
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            validate_non_negative_index("v_kappa_raw", "n_voxel", n_voxel);
            num_params_r__ += n_voxel;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            validate_non_negative_index("v_alpha", "n_voxel", n_voxel);
            num_params_r__ += n_voxel;
            current_statement_begin__ = 45;
            num_params_r__ += 1;
            current_statement_begin__ = 46;
            num_params_r__ += 1;
            current_statement_begin__ = 47;
            validate_non_negative_index("v_ntfp", "n_voxel", n_voxel);
            num_params_r__ += n_voxel;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_vtf() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 24;
        if (!(context__.contains_r("sigma_loc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_loc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_loc");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_loc", "double", context__.to_vec());
        double sigma_loc(0);
        sigma_loc = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_loc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_loc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("sigma_scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_scale");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_scale", "double", context__.to_vec());
        double sigma_scale(0);
        sigma_scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_scale: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "n_voxel", n_voxel);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(n_voxel));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(n_voxel);
        size_t sigma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("meanAngleVector")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable meanAngleVector missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("meanAngleVector");
        pos__ = 0U;
        validate_non_negative_index("meanAngleVector", "n_voxel", n_voxel);
        validate_non_negative_index("meanAngleVector", "2", 2);
        context__.validate_dims("parameter initialization", "meanAngleVector", "matrix_d", context__.to_vec(n_voxel,2));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> meanAngleVector(n_voxel, 2);
        size_t meanAngleVector_j_2_max__ = 2;
        size_t meanAngleVector_j_1_max__ = n_voxel;
        for (size_t j_2__ = 0; j_2__ < meanAngleVector_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < meanAngleVector_j_1_max__; ++j_1__) {
                meanAngleVector(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(meanAngleVector);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable meanAngleVector: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("s_gamma_loc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s_gamma_loc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s_gamma_loc");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s_gamma_loc", "double", context__.to_vec());
        double s_gamma_loc(0);
        s_gamma_loc = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s_gamma_loc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s_gamma_loc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("s_gamma_scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s_gamma_scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s_gamma_scale");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s_gamma_scale", "double", context__.to_vec());
        double s_gamma_scale(0);
        s_gamma_scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s_gamma_scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s_gamma_scale: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 32;
        if (!(context__.contains_r("v_gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_gamma");
        pos__ = 0U;
        validate_non_negative_index("v_gamma", "n_voxel", n_voxel);
        context__.validate_dims("parameter initialization", "v_gamma", "vector_d", context__.to_vec(n_voxel));
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_gamma(n_voxel);
        size_t v_gamma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_gamma_j_1_max__; ++j_1__) {
            v_gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, v_gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("v_kappa_loc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_kappa_loc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_kappa_loc");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "v_kappa_loc", "double", context__.to_vec());
        double v_kappa_loc(0);
        v_kappa_loc = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, v_kappa_loc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_kappa_loc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("v_kappa_scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_kappa_scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_kappa_scale");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "v_kappa_scale", "double", context__.to_vec());
        double v_kappa_scale(0);
        v_kappa_scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, v_kappa_scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_kappa_scale: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("v_kappa_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_kappa_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_kappa_raw");
        pos__ = 0U;
        validate_non_negative_index("v_kappa_raw", "n_voxel", n_voxel);
        context__.validate_dims("parameter initialization", "v_kappa_raw", "vector_d", context__.to_vec(n_voxel));
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_kappa_raw(n_voxel);
        size_t v_kappa_raw_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_kappa_raw_j_1_max__; ++j_1__) {
            v_kappa_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain((-(v_kappa_loc) / v_kappa_scale), v_kappa_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_kappa_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("s_alpha_loc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s_alpha_loc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s_alpha_loc");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s_alpha_loc", "double", context__.to_vec());
        double s_alpha_loc(0);
        s_alpha_loc = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(s_alpha_loc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s_alpha_loc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("s_alpha_scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s_alpha_scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s_alpha_scale");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s_alpha_scale", "double", context__.to_vec());
        double s_alpha_scale(0);
        s_alpha_scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s_alpha_scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s_alpha_scale: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("v_alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_alpha");
        pos__ = 0U;
        validate_non_negative_index("v_alpha", "n_voxel", n_voxel);
        context__.validate_dims("parameter initialization", "v_alpha", "vector_d", context__.to_vec(n_voxel));
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_alpha(n_voxel);
        size_t v_alpha_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_alpha_j_1_max__; ++j_1__) {
            v_alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(v_alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("s_ntfp_loc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s_ntfp_loc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s_ntfp_loc");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s_ntfp_loc", "double", context__.to_vec());
        double s_ntfp_loc(0);
        s_ntfp_loc = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(ntfp_min, s_ntfp_loc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s_ntfp_loc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 46;
        if (!(context__.contains_r("s_ntfp_scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s_ntfp_scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s_ntfp_scale");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s_ntfp_scale", "double", context__.to_vec());
        double s_ntfp_scale(0);
        s_ntfp_scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s_ntfp_scale);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s_ntfp_scale: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("v_ntfp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable v_ntfp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("v_ntfp");
        pos__ = 0U;
        validate_non_negative_index("v_ntfp", "n_voxel", n_voxel);
        context__.validate_dims("parameter initialization", "v_ntfp", "vector_d", context__.to_vec(n_voxel));
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_ntfp(n_voxel);
        size_t v_ntfp_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_ntfp_j_1_max__; ++j_1__) {
            v_ntfp(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(ntfp_min, v_ntfp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable v_ntfp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 24;
            local_scalar_t__ sigma_loc;
            (void) sigma_loc;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_loc = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_loc = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 25;
            local_scalar_t__ sigma_scale;
            (void) sigma_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_scale = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_scale = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, n_voxel, lp__);
            else
                sigma = in__.vector_lb_constrain(0, n_voxel);
            current_statement_begin__ = 27;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> meanAngleVector;
            (void) meanAngleVector;  // dummy to suppress unused var warning
            if (jacobian__)
                meanAngleVector = in__.matrix_constrain(n_voxel, 2, lp__);
            else
                meanAngleVector = in__.matrix_constrain(n_voxel, 2);
            current_statement_begin__ = 30;
            local_scalar_t__ s_gamma_loc;
            (void) s_gamma_loc;  // dummy to suppress unused var warning
            if (jacobian__)
                s_gamma_loc = in__.scalar_lb_constrain(0, lp__);
            else
                s_gamma_loc = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 31;
            local_scalar_t__ s_gamma_scale;
            (void) s_gamma_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                s_gamma_scale = in__.scalar_lb_constrain(0, lp__);
            else
                s_gamma_scale = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_gamma;
            (void) v_gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                v_gamma = in__.vector_lb_constrain(0, n_voxel, lp__);
            else
                v_gamma = in__.vector_lb_constrain(0, n_voxel);
            current_statement_begin__ = 35;
            local_scalar_t__ v_kappa_loc;
            (void) v_kappa_loc;  // dummy to suppress unused var warning
            if (jacobian__)
                v_kappa_loc = in__.scalar_lb_constrain(0, lp__);
            else
                v_kappa_loc = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 36;
            local_scalar_t__ v_kappa_scale;
            (void) v_kappa_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                v_kappa_scale = in__.scalar_lb_constrain(0, lp__);
            else
                v_kappa_scale = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 37;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_kappa_raw;
            (void) v_kappa_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                v_kappa_raw = in__.vector_lb_constrain((-(v_kappa_loc) / v_kappa_scale), n_voxel, lp__);
            else
                v_kappa_raw = in__.vector_lb_constrain((-(v_kappa_loc) / v_kappa_scale), n_voxel);
            current_statement_begin__ = 40;
            local_scalar_t__ s_alpha_loc;
            (void) s_alpha_loc;  // dummy to suppress unused var warning
            if (jacobian__)
                s_alpha_loc = in__.scalar_constrain(lp__);
            else
                s_alpha_loc = in__.scalar_constrain();
            current_statement_begin__ = 41;
            local_scalar_t__ s_alpha_scale;
            (void) s_alpha_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                s_alpha_scale = in__.scalar_lb_constrain(0, lp__);
            else
                s_alpha_scale = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_alpha;
            (void) v_alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                v_alpha = in__.vector_constrain(n_voxel, lp__);
            else
                v_alpha = in__.vector_constrain(n_voxel);
            current_statement_begin__ = 45;
            local_scalar_t__ s_ntfp_loc;
            (void) s_ntfp_loc;  // dummy to suppress unused var warning
            if (jacobian__)
                s_ntfp_loc = in__.scalar_lb_constrain(ntfp_min, lp__);
            else
                s_ntfp_loc = in__.scalar_lb_constrain(ntfp_min);
            current_statement_begin__ = 46;
            local_scalar_t__ s_ntfp_scale;
            (void) s_ntfp_scale;  // dummy to suppress unused var warning
            if (jacobian__)
                s_ntfp_scale = in__.scalar_lb_constrain(0, lp__);
            else
                s_ntfp_scale = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 47;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_ntfp;
            (void) v_ntfp;  // dummy to suppress unused var warning
            if (jacobian__)
                v_ntfp = in__.vector_lb_constrain(ntfp_min, n_voxel, lp__);
            else
                v_ntfp = in__.vector_lb_constrain(ntfp_min, n_voxel);
            // transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("v_kappa", "n_voxel", n_voxel);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> v_kappa(n_voxel);
            stan::math::initialize(v_kappa, DUMMY_VAR__);
            stan::math::fill(v_kappa, DUMMY_VAR__);
            stan::math::assign(v_kappa,add(v_kappa_loc, multiply(v_kappa_raw, v_kappa_scale)));
            current_statement_begin__ = 51;
            validate_non_negative_index("lengthOfMeanAngleVector", "n_voxel", n_voxel);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lengthOfMeanAngleVector(n_voxel);
            stan::math::initialize(lengthOfMeanAngleVector, DUMMY_VAR__);
            stan::math::fill(lengthOfMeanAngleVector, DUMMY_VAR__);
            stan::math::assign(lengthOfMeanAngleVector,stan::math::sqrt(rows_dot_self(meanAngleVector)));
            current_statement_begin__ = 52;
            validate_non_negative_index("meanAngleUnitVector", "n_voxel", n_voxel);
            validate_non_negative_index("meanAngleUnitVector", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> meanAngleUnitVector(n_voxel, 2);
            stan::math::initialize(meanAngleUnitVector, DUMMY_VAR__);
            stan::math::fill(meanAngleUnitVector, DUMMY_VAR__);
            stan::math::assign(meanAngleUnitVector,append_col(elt_divide(stan::model::rvalue(meanAngleVector, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "meanAngleVector"), lengthOfMeanAngleVector), elt_divide(stan::model::rvalue(meanAngleVector, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "meanAngleVector"), lengthOfMeanAngleVector)));
            current_statement_begin__ = 54;
            validate_non_negative_index("meanAngle", "n_voxel", n_voxel);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> meanAngle(n_voxel);
            stan::math::initialize(meanAngle, DUMMY_VAR__);
            stan::math::fill(meanAngle, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 56;
            for (int v = 1; v <= n_voxel; ++v) {
                current_statement_begin__ = 56;
                stan::model::assign(meanAngle, 
                            stan::model::cons_list(stan::model::index_uni(v), stan::model::nil_index_list()), 
                            atan2(get_base1(meanAngleUnitVector, v, 2, "meanAngleUnitVector", 1), get_base1(meanAngleUnitVector, v, 1, "meanAngleUnitVector", 1)), 
                            "assigning variable meanAngle");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            size_t v_kappa_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < v_kappa_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(v_kappa(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: v_kappa" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable v_kappa: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "v_kappa", v_kappa, 0);
            current_statement_begin__ = 51;
            size_t lengthOfMeanAngleVector_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < lengthOfMeanAngleVector_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(lengthOfMeanAngleVector(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: lengthOfMeanAngleVector" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lengthOfMeanAngleVector: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "lengthOfMeanAngleVector", lengthOfMeanAngleVector, 0);
            current_statement_begin__ = 52;
            size_t meanAngleUnitVector_j_1_max__ = n_voxel;
            size_t meanAngleUnitVector_j_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < meanAngleUnitVector_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < meanAngleUnitVector_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(meanAngleUnitVector(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: meanAngleUnitVector" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable meanAngleUnitVector: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 54;
            size_t meanAngle_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < meanAngle_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(meanAngle(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: meanAngle" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable meanAngle: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "meanAngle", meanAngle, -(stan::math::pi()));
            check_less_or_equal(function__, "meanAngle", meanAngle, stan::math::pi());
            // model body
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(lengthOfMeanAngleVector, 1, .1));
            current_statement_begin__ = 61;
            lp_accum__.add(gamma_log<propto__>(sigma_loc, 2, get_base1(priors, 1, "priors", 1)));
            current_statement_begin__ = 62;
            lp_accum__.add(gamma_log<propto__>(sigma_scale, 2, 0.5));
            current_statement_begin__ = 63;
            lp_accum__.add(normal_log<propto__>(sigma, sigma_loc, sigma_scale));
            current_statement_begin__ = 64;
            lp_accum__.add((-(normal_ccdf_log(0, sigma_loc, sigma_scale)) * n_voxel));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(s_gamma_loc, 0, get_base1(priors, 2, "priors", 1)));
            current_statement_begin__ = 68;
            lp_accum__.add(gamma_log<propto__>(s_gamma_scale, get_base1(priors, 6, "priors", 1), get_base1(priors, 7, "priors", 1)));
            current_statement_begin__ = 69;
            lp_accum__.add(normal_log<propto__>(v_gamma, s_gamma_loc, s_gamma_scale));
            current_statement_begin__ = 70;
            lp_accum__.add((-(normal_ccdf_log(0, s_gamma_loc, s_gamma_scale)) * n_voxel));
            current_statement_begin__ = 73;
            lp_accum__.add(gamma_log<propto__>(v_kappa_loc, get_base1(priors, 8, "priors", 1), get_base1(priors, 9, "priors", 1)));
            current_statement_begin__ = 74;
            lp_accum__.add(gamma_log<propto__>(v_kappa_scale, get_base1(priors, 10, "priors", 1), get_base1(priors, 11, "priors", 1)));
            current_statement_begin__ = 75;
            lp_accum__.add(std_normal_log<propto__>(v_kappa_raw));
            current_statement_begin__ = 76;
            lp_accum__.add((-(normal_ccdf_log((-(v_kappa_loc) / v_kappa_scale), 0, 1)) * n_voxel));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(s_alpha_loc, 0, get_base1(priors, 12, "priors", 1)));
            current_statement_begin__ = 80;
            lp_accum__.add(gamma_log<propto__>(s_alpha_scale, get_base1(priors, 16, "priors", 1), get_base1(priors, 17, "priors", 1)));
            current_statement_begin__ = 81;
            lp_accum__.add(normal_log<propto__>(v_alpha, s_alpha_loc, s_alpha_scale));
            current_statement_begin__ = 84;
            lp_accum__.add(normal_log<propto__>(s_ntfp_loc, ntfp_min, get_base1(priors, 18, "priors", 1)));
            current_statement_begin__ = 85;
            lp_accum__.add(gamma_log<propto__>(s_ntfp_scale, get_base1(priors, 22, "priors", 1), get_base1(priors, 23, "priors", 1)));
            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(v_ntfp, s_ntfp_loc, s_ntfp_scale));
            current_statement_begin__ = 87;
            lp_accum__.add((-(normal_ccdf_log(ntfp_min, s_ntfp_loc, s_ntfp_scale)) * n_voxel));
            {
            current_statement_begin__ = 93;
            validate_non_negative_index("vtf", "((n_unique_orientations * 2) * n_voxel)", ((n_unique_orientations * 2) * n_voxel));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> vtf(((n_unique_orientations * 2) * n_voxel));
            stan::math::initialize(vtf, DUMMY_VAR__);
            stan::math::fill(vtf, DUMMY_VAR__);
            current_statement_begin__ = 94;
            int i(0);
            (void) i;  // dummy to suppress unused var warning
            stan::math::fill(i, std::numeric_limits<int>::min());
            stan::math::assign(i,1);
            current_statement_begin__ = 96;
            for (int v = 1; v <= n_voxel; ++v) {
                {
                current_statement_begin__ = 97;
                int no(0);
                (void) no;  // dummy to suppress unused var warning
                stan::math::fill(no, std::numeric_limits<int>::min());
                stan::math::assign(no,get_base1(n_unique_orientations_vox, v, "n_unique_orientations_vox", 1));
                current_statement_begin__ = 98;
                int no2(0);
                (void) no2;  // dummy to suppress unused var warning
                stan::math::fill(no2, std::numeric_limits<int>::min());
                stan::math::assign(no2,(no * 2));
                current_statement_begin__ = 99;
                int up(0);
                (void) up;  // dummy to suppress unused var warning
                stan::math::fill(up, std::numeric_limits<int>::min());
                stan::math::assign(up,((i + no2) - 1));
                current_statement_begin__ = 100;
                validate_non_negative_index("resp_to_ori", "no", no);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> resp_to_ori(no);
                stan::math::initialize(resp_to_ori, DUMMY_VAR__);
                stan::math::fill(resp_to_ori, DUMMY_VAR__);
                stan::math::assign(resp_to_ori,stan::math::exp(multiply(get_base1(v_kappa, v, "v_kappa", 1), stan::math::cos(subtract(stan::model::rvalue(unique_orientations, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(ori_by_vox, stan::model::cons_list(stan::model::index_uni(v), stan::model::cons_list(stan::model::index_min_max(1, no), stan::model::nil_index_list())), "ori_by_vox")), stan::model::nil_index_list()), "unique_orientations"), get_base1(meanAngle, v, "meanAngle", 1))))));
                current_statement_begin__ = 101;
                if (as_bool(logical_gt(up, maxX))) {
                    current_statement_begin__ = 101;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "index should not exceed elements of X. Found up = ";
                    errmsg_stream__ << up;
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 102;
                stan::math::assign(resp_to_ori, divide(resp_to_ori, sum(resp_to_ori)));
                current_statement_begin__ = 107;
                stan::math::assign(resp_to_ori, multiply(resp_to_ori, get_base1(v_gamma, v, "v_gamma", 1)));
                current_statement_begin__ = 108;
                if (as_bool(logical_eq(modulation, 0))) {
                    current_statement_begin__ = 109;
                    stan::model::assign(vtf, 
                                stan::model::cons_list(stan::model::index_min_max(i, up), stan::model::nil_index_list()), 
                                add(get_base1(v_alpha, v, "v_alpha", 1), append_row(resp_to_ori, add(resp_to_ori, get_base1(v_ntfp, v, "v_ntfp", 1)))), 
                                "assigning variable vtf");
                } else if (as_bool(logical_eq(modulation, 1))) {
                    current_statement_begin__ = 111;
                    stan::model::assign(vtf, 
                                stan::model::cons_list(stan::model::index_min_max(i, up), stan::model::nil_index_list()), 
                                add(get_base1(v_alpha, v, "v_alpha", 1), append_row(resp_to_ori, multiply(resp_to_ori, get_base1(v_ntfp, v, "v_ntfp", 1)))), 
                                "assigning variable vtf");
                }
                current_statement_begin__ = 113;
                stan::math::assign(i, (i + no2));
                }
            }
            current_statement_begin__ = 115;
            lp_accum__.add(normal_log<propto__>(y, stan::model::rvalue(vtf, stan::model::cons_list(stan::model::index_multi(X), stan::model::nil_index_list()), "vtf"), stan::model::rvalue(sigma, stan::model::cons_list(stan::model::index_multi(voxel), stan::model::nil_index_list()), "sigma")));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_loc");
        names__.push_back("sigma_scale");
        names__.push_back("sigma");
        names__.push_back("meanAngleVector");
        names__.push_back("s_gamma_loc");
        names__.push_back("s_gamma_scale");
        names__.push_back("v_gamma");
        names__.push_back("v_kappa_loc");
        names__.push_back("v_kappa_scale");
        names__.push_back("v_kappa_raw");
        names__.push_back("s_alpha_loc");
        names__.push_back("s_alpha_scale");
        names__.push_back("v_alpha");
        names__.push_back("s_ntfp_loc");
        names__.push_back("s_ntfp_scale");
        names__.push_back("v_ntfp");
        names__.push_back("v_kappa");
        names__.push_back("lengthOfMeanAngleVector");
        names__.push_back("meanAngleUnitVector");
        names__.push_back("meanAngle");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_voxel);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_vtf_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_loc = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_loc);
        double sigma_scale = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_scale);
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, n_voxel);
        size_t sigma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> meanAngleVector = in__.matrix_constrain(n_voxel, 2);
        size_t meanAngleVector_j_2_max__ = 2;
        size_t meanAngleVector_j_1_max__ = n_voxel;
        for (size_t j_2__ = 0; j_2__ < meanAngleVector_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < meanAngleVector_j_1_max__; ++j_1__) {
                vars__.push_back(meanAngleVector(j_1__, j_2__));
            }
        }
        double s_gamma_loc = in__.scalar_lb_constrain(0);
        vars__.push_back(s_gamma_loc);
        double s_gamma_scale = in__.scalar_lb_constrain(0);
        vars__.push_back(s_gamma_scale);
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_gamma = in__.vector_lb_constrain(0, n_voxel);
        size_t v_gamma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_gamma_j_1_max__; ++j_1__) {
            vars__.push_back(v_gamma(j_1__));
        }
        double v_kappa_loc = in__.scalar_lb_constrain(0);
        vars__.push_back(v_kappa_loc);
        double v_kappa_scale = in__.scalar_lb_constrain(0);
        vars__.push_back(v_kappa_scale);
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_kappa_raw = in__.vector_lb_constrain((-(v_kappa_loc) / v_kappa_scale), n_voxel);
        size_t v_kappa_raw_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_kappa_raw_j_1_max__; ++j_1__) {
            vars__.push_back(v_kappa_raw(j_1__));
        }
        double s_alpha_loc = in__.scalar_constrain();
        vars__.push_back(s_alpha_loc);
        double s_alpha_scale = in__.scalar_lb_constrain(0);
        vars__.push_back(s_alpha_scale);
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_alpha = in__.vector_constrain(n_voxel);
        size_t v_alpha_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_alpha_j_1_max__; ++j_1__) {
            vars__.push_back(v_alpha(j_1__));
        }
        double s_ntfp_loc = in__.scalar_lb_constrain(ntfp_min);
        vars__.push_back(s_ntfp_loc);
        double s_ntfp_scale = in__.scalar_lb_constrain(0);
        vars__.push_back(s_ntfp_scale);
        Eigen::Matrix<double, Eigen::Dynamic, 1> v_ntfp = in__.vector_lb_constrain(ntfp_min, n_voxel);
        size_t v_ntfp_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_ntfp_j_1_max__; ++j_1__) {
            vars__.push_back(v_ntfp(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("v_kappa", "n_voxel", n_voxel);
            Eigen::Matrix<double, Eigen::Dynamic, 1> v_kappa(n_voxel);
            stan::math::initialize(v_kappa, DUMMY_VAR__);
            stan::math::fill(v_kappa, DUMMY_VAR__);
            stan::math::assign(v_kappa,add(v_kappa_loc, multiply(v_kappa_raw, v_kappa_scale)));
            current_statement_begin__ = 51;
            validate_non_negative_index("lengthOfMeanAngleVector", "n_voxel", n_voxel);
            Eigen::Matrix<double, Eigen::Dynamic, 1> lengthOfMeanAngleVector(n_voxel);
            stan::math::initialize(lengthOfMeanAngleVector, DUMMY_VAR__);
            stan::math::fill(lengthOfMeanAngleVector, DUMMY_VAR__);
            stan::math::assign(lengthOfMeanAngleVector,stan::math::sqrt(rows_dot_self(meanAngleVector)));
            current_statement_begin__ = 52;
            validate_non_negative_index("meanAngleUnitVector", "n_voxel", n_voxel);
            validate_non_negative_index("meanAngleUnitVector", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> meanAngleUnitVector(n_voxel, 2);
            stan::math::initialize(meanAngleUnitVector, DUMMY_VAR__);
            stan::math::fill(meanAngleUnitVector, DUMMY_VAR__);
            stan::math::assign(meanAngleUnitVector,append_col(elt_divide(stan::model::rvalue(meanAngleVector, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "meanAngleVector"), lengthOfMeanAngleVector), elt_divide(stan::model::rvalue(meanAngleVector, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "meanAngleVector"), lengthOfMeanAngleVector)));
            current_statement_begin__ = 54;
            validate_non_negative_index("meanAngle", "n_voxel", n_voxel);
            Eigen::Matrix<double, Eigen::Dynamic, 1> meanAngle(n_voxel);
            stan::math::initialize(meanAngle, DUMMY_VAR__);
            stan::math::fill(meanAngle, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 56;
            for (int v = 1; v <= n_voxel; ++v) {
                current_statement_begin__ = 56;
                stan::model::assign(meanAngle, 
                            stan::model::cons_list(stan::model::index_uni(v), stan::model::nil_index_list()), 
                            atan2(get_base1(meanAngleUnitVector, v, 2, "meanAngleUnitVector", 1), get_base1(meanAngleUnitVector, v, 1, "meanAngleUnitVector", 1)), 
                            "assigning variable meanAngle");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            check_greater_or_equal(function__, "v_kappa", v_kappa, 0);
            current_statement_begin__ = 51;
            check_greater_or_equal(function__, "lengthOfMeanAngleVector", lengthOfMeanAngleVector, 0);
            current_statement_begin__ = 54;
            check_greater_or_equal(function__, "meanAngle", meanAngle, -(stan::math::pi()));
            check_less_or_equal(function__, "meanAngle", meanAngle, stan::math::pi());
            // write transformed parameters
            if (include_tparams__) {
                size_t v_kappa_j_1_max__ = n_voxel;
                for (size_t j_1__ = 0; j_1__ < v_kappa_j_1_max__; ++j_1__) {
                    vars__.push_back(v_kappa(j_1__));
                }
                size_t lengthOfMeanAngleVector_j_1_max__ = n_voxel;
                for (size_t j_1__ = 0; j_1__ < lengthOfMeanAngleVector_j_1_max__; ++j_1__) {
                    vars__.push_back(lengthOfMeanAngleVector(j_1__));
                }
                size_t meanAngleUnitVector_j_2_max__ = 2;
                size_t meanAngleUnitVector_j_1_max__ = n_voxel;
                for (size_t j_2__ = 0; j_2__ < meanAngleUnitVector_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < meanAngleUnitVector_j_1_max__; ++j_1__) {
                        vars__.push_back(meanAngleUnitVector(j_1__, j_2__));
                    }
                }
                size_t meanAngle_j_1_max__ = n_voxel;
                for (size_t j_1__ = 0; j_1__ < meanAngle_j_1_max__; ++j_1__) {
                    vars__.push_back(meanAngle(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_vtf";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t meanAngleVector_j_2_max__ = 2;
        size_t meanAngleVector_j_1_max__ = n_voxel;
        for (size_t j_2__ = 0; j_2__ < meanAngleVector_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < meanAngleVector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "meanAngleVector" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_gamma_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_gamma_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_gamma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "v_kappa_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v_kappa_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_kappa_raw_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_kappa_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_kappa_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_alpha_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_alpha_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_alpha_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_ntfp_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_ntfp_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_ntfp_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_ntfp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_ntfp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t v_kappa_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < v_kappa_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "v_kappa" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lengthOfMeanAngleVector_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < lengthOfMeanAngleVector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lengthOfMeanAngleVector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t meanAngleUnitVector_j_2_max__ = 2;
            size_t meanAngleUnitVector_j_1_max__ = n_voxel;
            for (size_t j_2__ = 0; j_2__ < meanAngleUnitVector_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < meanAngleUnitVector_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "meanAngleUnitVector" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t meanAngle_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < meanAngle_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "meanAngle" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t meanAngleVector_j_2_max__ = 2;
        size_t meanAngleVector_j_1_max__ = n_voxel;
        for (size_t j_2__ = 0; j_2__ < meanAngleVector_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < meanAngleVector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "meanAngleVector" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_gamma_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_gamma_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_gamma_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "v_kappa_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "v_kappa_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_kappa_raw_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_kappa_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_kappa_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_alpha_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_alpha_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_alpha_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_ntfp_loc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s_ntfp_scale";
        param_names__.push_back(param_name_stream__.str());
        size_t v_ntfp_j_1_max__ = n_voxel;
        for (size_t j_1__ = 0; j_1__ < v_ntfp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v_ntfp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t v_kappa_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < v_kappa_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "v_kappa" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t lengthOfMeanAngleVector_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < lengthOfMeanAngleVector_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "lengthOfMeanAngleVector" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t meanAngleUnitVector_j_2_max__ = 2;
            size_t meanAngleUnitVector_j_1_max__ = n_voxel;
            for (size_t j_2__ = 0; j_2__ < meanAngleUnitVector_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < meanAngleUnitVector_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "meanAngleUnitVector" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t meanAngle_j_1_max__ = n_voxel;
            for (size_t j_1__ = 0; j_1__ < meanAngle_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "meanAngle" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_vtf_namespace::model_vtf stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
